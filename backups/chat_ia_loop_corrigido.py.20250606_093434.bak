"""
Corre√ß√£o Manual - Fun√ß√£o chat_ia_loop
===================================
Esta fun√ß√£o corrigida deve substituir a fun√ß√£o atual no arquivo analise_insights.py
"""

def chat_ia_loop(analises: Dict[str, Any]):
    """Chat IA com suporte a consultas din√¢micas sobre estrutura organizacional"""
    try:
        load_dotenv()
        client = OpenAI()
        
        # Inicializar contexto da conversa
        contexto_conversa = []
        
        # Mapear estrutura organizacional
        estrutura = mapear_estrutura_org(analises)
        
        # Validar estrutura
        if not estrutura['tribos']:
            msg_erro = "N√£o foi poss√≠vel carregar a estrutura organizacional. Verificar dados de entrada."
            logging.error(msg_erro)
            print(f"\n‚ùå {msg_erro}")
            return
        
        # Preparar prompt base com informa√ß√µes da estrutura
        sistema_base = {
            "role": "system",
            "content": f"""Voc√™ √© um consultor s√™nior especializado em Business Agility e Analytics.
            
            # Estrutura Organizacional
            - Total de Tribos: {len(estrutura['tribos'])}
            - Total de Squads: {estrutura['total_squads']}
            - Total de Pessoas: {estrutura['total_pessoas']}
            
            # Tribos Dispon√≠veis
            {chr(10).join(f"- {tribo}" for tribo in estrutura['tribos'].keys())}
            
            # Pap√©is na Organiza√ß√£o
            {chr(10).join(f"- {papel}: {qtd}" for papel, qtd in estrutura.get('papeis_total', {}).items())}
            """
        }
        
        print("\nüìä Consultor Executivo - Business Agility & Analytics")
        print(f"\nEstrutura Atual:")
        print(f"- {len(estrutura['tribos'])} Tribos")
        print(f"- {estrutura['total_squads']} Squads")
        print(f"- {estrutura['total_pessoas']} Pessoas")
        print("\nExemplos de consultas:")
        print("- 'an√°lise da tribo [nome da tribo]'")
        print("- 'composi√ß√£o do squad [nome do squad]'")
        print("- 'distribui√ß√£o de pap√©is na tribo [nome da tribo]'")
        print("- 'm√©tricas da organiza√ß√£o'")
        print("\nDigite 'sair' para encerrar")
        
        max_erros_consecutivos = 0
        max_erros_totais = 0
        while True:
            try:
                # Mecanismo de recupera√ß√£o para evitar loops infinitos
                if max_erros_consecutivos >= 3 or max_erros_totais >= 5:
                    logging.error(f"Muitos erros na entrada. Consecutivos: {max_erros_consecutivos}, Totais: {max_erros_totais}. Encerrando chat.")
                    print("\n‚ùå Muitos erros de entrada detectados. Encerrando o chat.")
                    break
                
                try:
                    print("\nVoc√™: ", end='', flush=True)
                    query = input().strip()
                    max_erros_consecutivos = 0  # Reset contador de erros consecutivos ap√≥s entrada bem-sucedida
                    
                    # Log de sucesso na leitura de entrada
                    logging.debug("Entrada do usu√°rio lida com sucesso")
                    
                except EOFError:
                    logging.warning("Erro EOF ao ler entrada. Tentando recuperar...")
                    max_erros_consecutivos += 1
                    max_erros_totais += 1
                    print("\n‚ö†Ô∏è Erro ao ler entrada (EOF). Digite novamente ou 'sair' para encerrar.")
                    # Pequena pausa para evitar ciclo muito r√°pido
                    import time
                    time.sleep(0.5)
                    continue
                
                if query.lower() == "sair":
                    break
                
                # Log da consulta recebida
                logging.info(f"Consulta recebida: '{query}'")
                
                # Identificar entidade (tribo/squad) na query
                entidade, nome = identificar_entidade_consulta(query, estrutura)
                logging.info(f"Entidade identificada: '{entidade}', Nome: '{nome}'")
                
                # Preparar dados espec√≠ficos da consulta
                dados_consulta = preparar_dados_consulta(entidade, nome, estrutura, analises)
                
                # Gerar resposta contextualizada
                resposta = gerar_resposta_contextualizada(query, entidade, dados_consulta, client)
                
                # Atualizar contexto da conversa
                contexto_conversa.append(("Voc√™", query))
                contexto_conversa.append(("IA", resposta))
                
                print(f"\nü§ñ IA: {resposta}\n")
                
            except Exception as e:
                logging.error(f"Erro no chat: {str(e)}")
                traceback.print_exc()
                print(f"\n‚ùå Ops! Tive um problema: {str(e)}")
        
        return contexto_conversa
    except Exception as e:
        logging.error(f"Erro ao iniciar chat: {str(e)}")
        traceback.print_exc()
        print(f"\n‚ùå Erro ao iniciar chat: {str(e)}")
